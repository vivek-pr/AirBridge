webserver:
  image: airbridge-webserver
  tag: "3.0.4"
  pullPolicy: IfNotPresent
  replicas: 1
  service:
    port: 8080
    type: ClusterIP
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
  pdb:
    enabled: false
    minAvailable: 1
scheduler:
  image: airbridge-scheduler
  tag: "3.0.4"
  pullPolicy: IfNotPresent
  replicas: 1
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
  pdb:
    enabled: false
    minAvailable: 1
triggerer:
  image: airbridge-triggerer
  tag: "3.0.4"
  pullPolicy: IfNotPresent
  replicas: 1
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
  pdb:
    enabled: false
    minAvailable: 1
flower:
  enabled: false
  image: apache/airflow
  tag: "2.7.1"
  pullPolicy: IfNotPresent
  replicas: 1
  service:
    port: 5555
    type: ClusterIP
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
  pdb:
    enabled: false
    minAvailable: 1
edgeApi:
  enabled: true
  tokenSecretName: edge-api-token
  tokenSecretId: ""
  createSecret: false
  token: ""

ingress:
  enabled: false
  controller: nginx # or gke
  host: ""
  className: ""
  annotations: {}
  tls:
    enabled: false
    secretName: ""
    issuer: ""
    acmCertificateArn: ""
  ipAllowList: []
  rateLimit:
    rps: null
    burst: null
  waf:
    enabled: false
    securityPolicy: ""
  healthCheckPath: /healthz

airflow:
  executor: airflow.providers.edge3.executors.EdgeExecutor
  config: |
    [core]
    load_examples = False
    [logging]
    remote_logging = True
    remote_log_conn_id = aws_default
    remote_base_log_folder = s3://airbridge-logs/logs
    delete_local_logs = True
    [api_auth]
    jwt_secret = ${JWT_SECRET}

# DAG volume and git sync configurations are unchanged
# from previous chart versions.
dags:
  path: /opt/airflow/dags
  persistence:
    enabled: true
    size: 5Gi
    # Use an RWX class if multiple pods may run on different nodes.
    # Common examples:
    #  - EKS:  efs-sc
    #  - AKS:  azurefile-csi
    #  - GKE:  filestore-csi
    storageClassName: standard
    accessMode: ReadWriteMany   # If your class only supports RWO, change to ReadWriteOnce

  # If you prefer pulling DAGs from git, enable this instead of (or in addition to) manual uploads.
  gitSync:
    enabled: false

dagSync:
  enabled: false
  bucket: ""
  prefix: ""
  image: amazon/aws-cli:2.13.5
  mode: cronjob   # cronjob or sidecar
  schedule: "*/1 * * * *"
  intervalSeconds: 60
  backoffLimit: 3
  retries: 5

postgres:
  image: postgres
  tag: "15"
  pullPolicy: IfNotPresent
  user: airflow
  password: airflow
  db: airflow
  port: 5432
